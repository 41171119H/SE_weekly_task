diff --git a/app.py b/app.py
index 44e11f8..8231dd2 100644
--- a/app.py
+++ b/app.py
@@ -6,10 +6,15 @@ from marshmallow import ValidationError
 from schemas import LoginSchema, UserDataUpdateSchema
 from flask_migrate import Migrate
 from flask_cors import CORS
+from models import db, TeacherFiles, StudentFiles
+from werkzeug.utils import secure_filename
+from flask import abort, send_file
 
 import os
+import hashlib
 
 ALLOWED_EXTENSIONS = {'pdf'}
+OTHER_ALLOWED_EXTENSIONS = {'pdf', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff', 'webp', 'doc', 'docx', 'txt'}
 
 app = Flask(__name__)
 cors = CORS(app)
@@ -290,9 +295,54 @@ def save_file(file):
     return None
 
 
-# API: 上傳檔案處理
-@app.route('/api/upload', methods=['POST'])
-def upload_file():
+# function: checksum & 儲存資訊到資料庫
+def generate_checksum(filepath):
+    # 計算檔案的 SHA256 
+    sha256_hash = hashlib.sha256()
+    with open(filepath, "rb") as f:
+        for byte_block in iter(lambda: f.read(4096), b""):
+            sha256_hash.update(byte_block)
+    return sha256_hash.hexdigest()
+
+# 學生和教師的資訊分別存到 teacher_files 或 student_files (有更新 models.py)
+def save_file_info(uploader_id, uploader_type, class_id, filename, filepath):
+    checksum = generate_checksum(filepath)
+
+    if uploader_type == "teacher":
+        new_file = TeacherFiles(
+            class_id=class_id,
+            teacher=uploader_id,
+            name=filename,
+            path=filepath,
+            checksum=checksum
+        )
+    elif uploader_type == "student":
+        new_file = StudentFiles(
+            class_id=class_id,
+            student=uploader_id,
+            name=filename,
+            path=filepath,
+            checksum=checksum
+        )
+    else:
+        return False
+
+    db.session.add(new_file)
+    db.session.commit()
+    return True
+
+# API: 上傳檔案處理 (更新: 將資訊存入資料庫)
+@app.route('/api/upload_pdf', methods=['POST'])
+@jwt_required()
+def upload_pdf():
+    claims = get_jwt()
+    uploader_id = claims.get("user_id")
+    uploader_type = claims.get("user_type")
+    course_id = request.args.get("course_id")
+
+    if not course_id:
+        return jsonify({'error': 'Course ID is required'}), 400
+
     # 檢查是否有文件
     if 'file' not in request.files:
         return jsonify({'error': 'No file part'}), 400
@@ -303,13 +353,139 @@ def upload_file():
     if file.filename == '':
         return jsonify({'error': 'No selected file'}), 400
 
+    # 檢查檔案是否為 PDF
+    if not file.filename.lower().endswith('.pdf'):
+        return jsonify({'error': 'Only PDF files are allowed'}), 400
+
     # 儲存檔案
-    filename = save_file(file)
+    filename, filepath = save_file(file, ALLOWED_EXTENSIONS)
     if filename:
-        return jsonify({'message': 'File uploaded successfully', 'filename': filename}), 200
+        # 呼叫 generate_checksum()
+        checksum = generate_checksum(filepath)
+        
+        # 呼叫 save_file_info() 儲存資訊進資料庫中
+        if save_file_info(uploader_id, uploader_type, course_id, filename, filepath, checksum):
+            return jsonify({'message': 'PDF file uploaded successfully', 'filename': filename}), 200
+        else:
+            return jsonify({'error': 'Failed to save file info'}), 500
     else:
         return jsonify({'error': 'File type not allowed'}), 400
 
+# 新增其他檔案類型的上傳功能
+@app.route('/api/upload_various_file', methods=['POST'])
+@jwt_required()
+def upload_various_file():
+    claims = get_jwt()
+    uploader_id = claims.get("user_id")
+    uploader_type = claims.get("user_type")
+    class_id = request.form.get("class_id")  # 修改這裡，從 course_id 改為 class_id
+
+    if not class_id:
+        return jsonify({'error': 'Class ID is required'}), 400
+
+    if 'file' not in request.files:
+        return jsonify({'error': 'No file part'}), 400
+
+    file = request.files['file']
+
+    if file.filename == '':
+        return jsonify({'error': 'No selected file'}), 400
+
+    filename, filepath = save_file(file, OTHER_ALLOWED_EXTENSIONS)
+    if filename:
+        # 儲存檔案資訊到資料庫
+        if save_file_info(uploader_id, uploader_type, class_id, filename, filepath):
+            return jsonify({'message': 'File uploaded successfully', 'filename': filename}), 200
+        else:
+            return jsonify({'error': 'Failed to save file info'}), 500
+    return jsonify({'error': 'File type not allowed'}), 400
+
+# secure_filename:
+def save_file(file, allowed_extensions):
+    if file and '.' in file.filename and file.filename.rsplit('.', 1)[1].lower() in allowed_extensions:
+        filename = secure_filename(file.filename)
+        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
+        counter = 1
+        while os.path.exists(file_path):
+            name, ext = os.path.splitext(filename)
+            filename = f"{name}_{counter}{ext}"
+            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
+            counter += 1
+        file.save(file_path)
+        return filename, file_path
+    return None, None
+    
+# API 下載檔案 : <api/download/>
+@app.route('/api/download/<int:class_id>/<filename>', methods=['GET'])
+@jwt_required()
+def download_file(class_id, filename):
+    # 取得 JWT 中的 Claims
+    claims = get_jwt()
+    user_type = claims.get("user_type")
+    user_id = claims.get("user_id")
+
+    # 驗證使用者類型並檢查檔案記錄
+    file_record = None
+    if user_type == "teacher":
+        file_record = TeacherFiles.query.filter_by(
+            name=filename, class_id=class_id, teacher=user_id
+        ).first()
+    elif user_type == "student":
+        file_record = StudentFiles.query.filter_by(
+            name=filename, class_id=class_id, student=user_id
+        ).first()
+    else:
+        abort(403, description="Access forbidden: Invalid user type")
+
+    # 檢查檔案記錄是否存在
+    if not file_record:
+        abort(404, description="File not found or unauthorized access")
+
+    # 確保 uploads 資料夾設定正確
+    upload_folder = app.config.get('UPLOAD_FOLDER')
+    if not upload_folder:
+        abort(500, description="UPLOAD_FOLDER is not configured")
+
+    safe_filename = secure_filename(filename)
+    upload_path = os.path.join(upload_folder, safe_filename)
+
+    # 檢查檔案是否存在於 uploads
+    if not os.path.exists(upload_path):
+        abort(404, description="File not found in uploads")    
+    
+    # 允許使用者下載:直接傳送
+    try:
+        return send_file(upload_path, as_attachment=True, download_name=safe_filename)
+    except Exception as e:
+        app.logger.error(f"Error sending file: {e}")
+        abort(500, description="Error serving file for download")
+    '''
+    # [method2] 複製檔案到 downloads 資料夾 再傳送 : 
+    # 確保 downloads 資料夾設定正確
+    download_folder = app.config.get('DOWNLOAD_FOLDER')
+    if not download_folder:
+        abort(500, description="DOWNLOAD_FOLDER is not configured")
+
+    # 確保 downloads 資料夾存在
+    if not os.path.exists(download_folder):
+        os.makedirs(download_folder)
+    
+    try:
+        with open(upload_path, 'rb') as src, open(download_path, 'wb') as dst:
+            while chunk := src.read(4096):  # 每次讀取 4KB
+                dst.write(chunk)
+    except Exception as e:
+        app.logger.error(f"Error copying file to downloads: {e}")
+        abort(500, description="Error preparing file for download")
+
+    # 傳送檔案給用戶端
+    try:
+        return send_file(download_path, as_attachment=True, download_name=safe_filename)
+    except Exception as e:
+        app.logger.error(f"Error sending file: {e}")
+        abort(500, description="Error serving file for download")
+    '''
+
 # API 回傳以及顯示上傳的檔案:
 @app.route('/api/uploads/<filename>', methods=['GET'])
 def get_uploaded_file(filename):
@@ -317,9 +493,10 @@ def get_uploaded_file(filename):
     if os.path.exists(os.path.join(app.config['UPLOAD_FOLDER'], filename)):
         return send_from_directory(app.config['UPLOAD_FOLDER'], filename)
     else:
+        # Not Found: 404
         return jsonify({'error': 'File not found'}), 404
 
 if __name__ == "__main__":
     if not os.path.exists(app.config['UPLOAD_FOLDER']):
         os.makedirs(app.config['UPLOAD_FOLDER'])
-    app.run(debug=True)
+    app.run(debug=True)
\ No newline at end of file
